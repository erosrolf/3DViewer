pipeline {
  agent any

  environment {
    TELEGRAM_TOKEN = credentials('telegram-bot-token')
    CHAT_ID = "-1002115020059"
  }

  stages {
    stage("Prepare message") {
      steps {
        script {
          // Создаем или очищаем файл message перед началом сборки
          writeFile file: 'message', text: "Build number ${env.BUILD_NUMBER}npushed to ${env.GIT_BRANCH}, commit ID = ${env.GIT_COMMIT}n"
        }
      }
    }

    stage("core_lib_build") {
      steps {
        sh 'printenv'
        echo "Start build core lib"
        dir ('src'){
          sh 'make build/core_lib.a'
        }
      }
      post {
        success {
          script {
            appendToFile('message', "Core lib build: SUCCESS");
          }
        }
        failure {
          script {
            appendToFile('message', "Core lib build: FAILURE");
          }
        }
      }
    }

    stage("core_test") {
      steps {
        echo "Start build core test"
        dir('src') {
          sh 'make core_test'
        }
      }
      post {
        success {
          script {
            appendToFile('message', "Core lib test: SUCCESS");
          }
        }
        failure {
          script {
            appendToFile('message', "Core lib test: FAILURE");
          }
        }
      }
    }
  }

  post {
    always {
      script {
        env.TEXT = readFile 'message'
        env.GIT_COMMIT_AUTHOR = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()
        env.GIT_COMMIT_MESSAGE = sh(script: "git log -1 --pretty=format:'%s'", returnStdout: true).trim()
        sh 'curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d text="${message}"'
      }
    }
  }
}

def appendToFile(String fileName, String text) {
  def file = new File(fileName)
  file << text
}
